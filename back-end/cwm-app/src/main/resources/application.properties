# ===================================================================
# COMMON SPRING BOOT PROPERTIES
#
# This sample file is provided as a guideline. Do NOT copy it in its
# entirety to your own application.               ^^^

# This content is released under the MIT License (MIT)
#
# Copyright (c) 2017, canchito-dev
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# 
# @author 		José Carlos Mendoza Prego
# @copyright	Copyright (c) 2017, canchito-dev (http://www.canchito-dev.com)
# @license		http://opensource.org/licenses/MIT	MIT License
# @link			https://github.com/canchito-dev/canchito-workflow-manager
# ===================================================================

# ----------------------------------------
# BANNER
# banner.charset 	= Banner file encoding.
# banner.location 	= Banner file location.
# ----------------------------------------
banner.charset=UTF-8
banner.location=classpath:banner.txt	

# ----------------------------------------
# EMBEDDED SERVER CONFIGURATION (ServerProperties)
# server.address 				= Network address to which the server should bind to.
# server.connection-timeout 	= Time in milliseconds that connectors will wait for another HTTP request before closing the connection. 
#							  	  When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no 
#							  	  (i.e. infinite) timeout.
# server.display-name 			= Display name of the application.
# server.servlet-path			= Path of the main dispatcher servlet.
# server.port 					= Server HTTP port.
# server.tomcat.max-connections = Maximum number of connections that the server will accept and process at any given time.
# server.tomcat.max-threads 	= Maximum amount of worker threads.
# server.tomcat.uri-encoding 	= Character encoding to use to decode the URI.
# ----------------------------------------
server.address=localhost
server.connection-timeout=60000
server.display-name=Canchito Workflow Manager
server.servlet-path=/canchito-dev-rest
server.port=9000
server.tomcat.max-connections=100
server.tomcat.max-threads=100
server.tomcat.uri-encoding=UTF-8

# ----------------------------------------
# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
# Source: http://stackoverflow.com/questions/30451470/connection-to-db-dies-after-424-in-spring-boot-jpa-hibernate
# Validate the connection before borrowing it from the pool.
# spring.datasource.continue-on-error	= Do not stop if an error occurs while initializing the database.
# spring.datasource.driver-class-name	= Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
# spring.datasource.password			= Login password of the database.
# spring.datasource.url					= JDBC url of the database.
# spring.datasource.username			= Login username of the database.
# cwm.datasource.*						= Datasource specific settings
# ----------------------------------------
spring.datasource.continue-on-error=false
spring.datasource.url=jdbc:mysql://localhost:3306/database-url?autoReconnect=true
spring.datasource.username=username
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
cwm.datasource.test-on-borrow=true
cwm.datasource.test-on-return=true
cwm.datasource.test-while-idle=true
cwm.datasource.validation-query=SELECT 1
cwm.datasource.validation-interval=30000
cwm.datasource.connection-timeout=60000
cwm.datasource.connection-test-query=SELECT 1
cwm.datasource.log-validation-errors=true
cwm.datasource.max-idle=1
cwm.datasource.min-idle=1
cwm.datasource.max-active=5
cwm.datasource.initial-size=5
cwm.datasource.time-between-eviction-runs-millis=5000
cwm.datasource.min-evictable-idle-time-millis=30000

# ----------------------------------------
# FLOWABLE BPM - Data Source (FlowableDataSourceProperties)
# flowable.datasource.url							= JDBC URL of the database.
# flowable.datasource.username						= Username to connect to the database.
# flowable.datasource.password						= Password to connect to the database.
# flowable.datasource.driver-class-name				= Implementation of the driver for the specific database type.
# flowable.datasource.jdbc-max-wait-time			= This is a low level setting that gives the pool a chance to print a log status and re-attempt the acquisition of a connection in the case that it is taking unusually long (to avoid failing silently forever if the pool is misconfigured) Default is 20000 (20 seconds).
# flowable.datasource.jdbc-max-checkout-time		= The amount of time in milliseconds a connection can be checked out from the connection pool before it is forcefully returned. Default is 20000 (20 seconds).
# flowable.datasource.jdbc-max-idle-connections		= The number of idle connections that the connection pool at maximum at any time can contain.
# flowable.datasource.jdbc-max-active-connections	= The number of active connections that the connection pool at maximum at any time can contain. Default is 10.
# flowable.datasource.db-enable-event-logging		= Enable event loggint. Default is true
# ----------------------------------------
flowable.datasource.jdbc-max-wait-time=20001
flowable.datasource.jdbc-max-checkout-time=20001
flowable.datasource.jdbc-max-idle-connections=11
flowable.datasource.jdbc-max-active-connections=11
flowable.datasource.db-enable-event-logging=true

# ----------------------------------------
# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
# spring.jpa.show-sql	= Enable logging of SQL statements.
# ----------------------------------------
spring.jpa.show-sql=false

# ----------------------------------------
# QUEUE PROPERTIES
# cwm.queues.queue[].pool-name			= name given to the thread in the pool
# cwm.queues.queue[].core-pool-size		= the number of threads to keep in the pool, even if they are idle
# cwm.queues.queue[].maximum-pool-size	= the maximum number of threads to allow in the pool
# cwm.queues.queue[].keep-alive-time	= when the number of threads is greater than the core, this is the maximum time that excess idle 
# 										  threads will wait for new tasks before terminating
# cwm.queues.queue[].bean-id			= the bean-id of long-runing task which the thread pool will execute. Must be written exacty as it is defined in 
#										  the class path task-runnable-beans.xml bean definition
# ----------------------------------------
cwm.queues.queue[0].pool-name=move-task
cwm.queues.queue[0].core-pool-size=1
cwm.queues.queue[0].maximum-pool-size=1
cwm.queues.queue[0].keep-alive-time=100
cwm.queues.queue[0].bean-id=moveTaskRunnable
cwm.queues.queue[1].pool-name=copy-task
cwm.queues.queue[1].core-pool-size=1
cwm.queues.queue[1].maximum-pool-size=1
cwm.queues.queue[1].keep-alive-time=100
cwm.queues.queue[1].bean-id=copyTaskRunnable
cwm.queues.queue[2].pool-name=task1-task
cwm.queues.queue[2].core-pool-size=1
cwm.queues.queue[2].maximum-pool-size=2
cwm.queues.queue[2].keep-alive-time=100
cwm.queues.queue[2].bean-id=task1Runnable
cwm.queues.queue[3].pool-name=task2-task
cwm.queues.queue[3].core-pool-size=1
cwm.queues.queue[3].maximum-pool-size=2
cwm.queues.queue[3].keep-alive-time=100
cwm.queues.queue[3].bean-id=task2Runnable

# ----------------------------------------
# FLOWABLE BPM - Async Job Executor (FlowableAsycExecutorProperties)
# flowable.async-executor.thread-pool-queue-size				= The size of the queue on which jobs to be executed are placed after being acquired, before they are actually executed by a thread from the thread pool. Default is 100
# flowable.async-executor.core-pool-size						= The minimal number of threads that are kept alive in the thread pool for job execution. Default is 2
# flowable.async-executor.max-pool-size							= The maximum number of threads that are created in the thread pool for job execution. Default is 10
# flowable.async-executor.thread-keep-alive-time				= The time (in milliseconds) a thread used for job execution must be kept alive before it is destroyed. Having a setting > 0 takes resources, but in the case of many job executions it avoids creating new threads all the time. If 0, threads will be destroyed after they\u2019ve been used for job execution. Default is 5000
# flowable.async-executor.number-of-retries						= The number of times a job will be retried before it is moved to the deadletter table. Default is 3
# flowable.async-executor.max-timer-jobs-per-acquisition		= The number of timer jobs that are acquired in one query. Default value is 1, as this lowers the potential for optimistic locking exceptions. Larger values can perform better, but the chance of optimistic locking exceptions occurring between different engines becomes larger too. Default is 1
# flowable.async-executor.max-async-jobs-due-per-acquisition	= The number of async jobs that are acquired during one query. Default value is 1, as this lowers the potential for optimistic locking exceptions. Larger values can perform better, but the chance of optimistic locking exceptions occurring between different engines becomes larger too. Default is 1
# flowable.async-executor.default-async-job-acquire-wait-time	= The time (in milliseconds) the timer acquisition thread will wait to execute the next query. This happens when no new timer jobs are found or when less timer jobs have been fetched than set in asyncExecutorMaxTimerJobsPerAcquisition. Default is 10000
# flowable.async-executor.default-timer-job-acquire-wait-time	= The time (in milliseconds) the async job acquisition thread will wait to execute the next query. This happens when no new async jobs were found or when less async jobs have been fetched than set in asyncExecutorMaxAsyncJobsDuePerAcquisition. Default is 10000
# flowable.async-executor.default-queue-size-full-wait-time		= The time (in milliseconds) the async job (both timer and async continuations) acquisition thread will wait when the internal job queue is full to execute the next query. By default set to 0 (for backwards compatibility). Setting this property to a higher value allows the async executor to hopefully clear its queue a bit. Default is 0
# flowable.async-executor.timer-lock-time-in-millis				= The amount of time (in milliseconds) a timer job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job. Default is 300000
# flowable.async-executor.async-job-lock-time-in-millis			= The amount of time (in milliseconds) an async job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job. Default is 300000
# flowable.async-executor.seconds-to-wait-on-shutdown			= The time (in seconds) that is waited to gracefully shut down the thread pool used for job execution when a shutdown on the executor (or process engine) is requested. Default is 60000
# flowable.async-executor.reset-expired-jobs-interval			= The amount of time (in milliseconds) that is between two consecutive checks of expired jobs. Expired jobs are jobs that were locked (a lock owner + time was written by some executor, but the job was never completed). During such a check, jobs that are expired are made available again, meaning the lock owner and lock time will be removed. Other executors will now be able to pick it up. A job is deemed expired if the lock time is before the current date. Default is 60000
# flowable.async-executor.reset-expired-jobs-page-size			= The amount of jobs that are fetched at once by the reset expired thread of the async executor. Default is 3 
# ----------------------------------------
flowable.async-executor.thread-pool-queue-size=100
flowable.async-executor.core-pool-size=2
flowable.async-executor.max-pool-size=10
flowable.async-executor.thread-keep-alive-time=5000
flowable.async-executor.number-of-retries=3
flowable.async-executor.max-timer-jobs-per-acquisition=1
flowable.async-executor.max-async-jobs-due-per-acquisition=1
flowable.async-executor.default-async-job-acquire-wait-time=10000
flowable.async-executor.default-timer-job-acquire-wait-time=10000
flowable.async-executor.default-queue-size-full-wait-time=0
flowable.async-executor.timer-lock-time-in-millis=300000
flowable.async-executor.async-job-lock-time-in-millis=300000
flowable.async-executor.seconds-to-wait-on-shutdown=60
flowable.async-executor.reset-expired-jobs-interval=60000
flowable.async-executor.reset-expired-jobs-page-size=3

# ----------------------------------------
# FLOWABLE BPM (FlowableProperties)
# flowable.async-executor-activate		= Instructs the Activiti Engine to startup the Async Executor thread pool at startup. Can be true (activate) of false (suspend)
# flowable.check-process-definitions	= Whether to automatically deploy resources. Can be true (deploy) of false (not deploy)
# flowable.history-level				= Following history levels can be configured:
# 										  none: skips all history archiving. This is the most performant for runtime process execution, but no historical information will be available.
# 										  activity: archives all process instances and activity instances. At the end of the process instance, the latest values of the top level process instance variables will be copied to historic variable instances. No details will be archived.
# 										  audit: This is the default. It archives all process instances, activity instances, keeps variable values continuously in sync and all form properties that are submitted so that all user interaction through forms is traceable and can be audited.
# 										  full: This is the highest level of history archiving and hence the slowest. This level stores all information as in the audit level plus all other possible details, mostly this are process variable updates.
# ----------------------------------------
flowable.async-executor-activate=true
flowable.check-process-definitions=false
flowable.history-level=audit

# ----------------------------------------
# FLOWABLE BPM - Email (FlowableProperties)
# flowable.mail-server-default-from	= The name of the sender as it will appear in mail
# flowable.mail-server-host			= SMTP server host. For instance `smtp.example.com`
# flowable.mail-server-password		= Login password of the SMTP server.
# flowable.mail-server-port			= SMTP server port.
# flowable.mail-server-use-tls		= Use tls or not
# flowable.mail-server-user-name	= Login user of the SMTP server.
# ----------------------------------------
flowable.mail-server-default-from=server-default-from
flowable.mail-server-host=mail-server-host
flowable.mail-server-password=mail-server-password
flowable.mail-server-port=mail-server-port
flowable.mail-server-use-tls=mail-server-use-tls
flowable.mail-server-user-name=mail-server-user-name

# ----------------------------------------
# AMAZON WEB SERVICES
# ----------------------------------------
amazon.credentials-access-key-id=credentials-access-key-id
amazon.credentials-secret-access-key=credentials-secret-access-key
amazon.configuration-region=eu-central-1
amazon.tm-minimum-upload-part-size=64
amazon.tm-multipart-upload-threshold=16

# ----------------------------------------
# MANAGEMENT HTTP SERVER (ManagementServerProperties)
# management.address			= Network address that the management endpoints should bind to.
# management.context-path		= Management endpoint context-path. For instance `/actuator`
# management.port				= Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.
# management.security.enabled	= Enable security.
# ----------------------------------------
management.address=localhost
management.context-path=/canchito-dev-actuator
management.port=9001
management.security.enabled=false

# ----------------------------------------
# ACTUATOR PROPERTIES
#
# ENDPOINTS (AbstractEndpoint subclasses)
# endpoints.enabled					= Enable endpoints.
# endpoints.sensitive				= Default endpoint sensitive setting.
# endpoints.actuator.enabled		= Enable the endpoint.
# endpoints.auditevents.enabled		= Enable the endpoint.
# endpoints.autoconfig.enabled		= Enable the endpoint.
# endpoints.beans.enabled			= Enable the endpoint.
# endpoints.configprops.enabled		= Enable the endpoint.
# endpoints.docs.curies.enabled		= Enable the curie generation.
# endpoints.docs.enabled			= Enable actuator docs endpoint.
# endpoints.dump.enabled			= Enable the endpoint.
# endpoints.env.enabled				= Enable the endpoint.
# endpoints.flyway.enabled			= Enable the endpoint.
# endpoints.health.enabled			= Enable the endpoint.
# endpoints.heapdump.enabled		= Enable the endpoint.
# endpoints.hypermedia.enabled		= Enable hypermedia support for endpoints.
# endpoints.info.enabled			= Enable the endpoint.
# endpoints.jolokia.enabled			= Enable Jolokia endpoint.
# endpoints.liquibase.enabled		= Enable the endpoint.
# endpoints.logfile.enabled			= Enable the endpoint.
# endpoints.loggers.enabled			= Enable the endpoint.
# endpoints.mappings.enabled		= Enable the endpoint.
# endpoints.metrics.enabled			= Enable the endpoint.
# endpoints.shutdown.enabled		= Enable the endpoint.
# endpoints.trace.enabled			= Enable the endpoint.
# endpoints.trace.filter.enabled	= Enable the trace servlet filter.
# endpoints.flowable.enabled		= Enables Flowable engine endpoint
# ----------------------------------------
endpoints.enabled=true
endpoints.sensitive=false
endpoints.actuator.enabled=true
endpoints.auditevents.enabled=true
endpoints.autoconfig.enabled=true
endpoints.beans.enabled=true
endpoints.configprops.enabled=true
endpoints.docs.curies.enabled=false
endpoints.docs.enabled=true
endpoints.dump.enabled=true
endpoints.env.enabled=true
endpoints.flyway.enabled=true
endpoints.health.enabled=true
endpoints.heapdump.enabled=true
endpoints.hypermedia.enabled=false
endpoints.info.enabled=true
endpoints.jolokia.enabled=true
endpoints.liquibase.enabled=true
endpoints.logfile.enabled=true
endpoints.loggers.enabled=true
endpoints.mappings.enabled=true
endpoints.metrics.enabled=true
endpoints.shutdown.enabled=true
endpoints.trace.enabled=true
endpoints.trace.filter.enabled=true
endpoints.flowable.enabled=true